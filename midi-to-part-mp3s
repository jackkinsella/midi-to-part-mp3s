#!/usr/bin/env python3
import sys
import os

import sox
import mido

output_directory = "./output"
soundfont_path = "./soundfonts/timbres-of-heaven.sf2"

class Part:
    def __init__(self, name='', midi='', midi_filepath=''):
        self.name = name
        self.midi = midi
        self.midi_filepath = midi_filepath
        self.mp3 = convert_midi_to_mp3(midi_filepath)

    def mp3_filepath(self):
        return self.midi_filepath.replace(".midi", ".mp3")

def track_names(midi_data):
  return list(map(lambda track: track.name, midi_dat.tracks))

def instrument_number_for_part(part):
    # based off http://www3.cpdl.org/wiki/index.php/User:Robert_Urmann
    mapping = {
            "soprano": 76, # pan flute
            "alt": 75, # recorder
            "tenor": 49, # string ensemble 1
            "bass": 50 # string ensemble 2
            }
    return mapping[part]

def generate_solo_parts(midi_data, track_numbers, part_name):
  midi = mido.MidiFile()

  for track_number in track_numbers:
    midi.tracks.append(midi_data.tracks[track_number])

  change_instrument(midi, instrument_number_for_part(part_name))
  new_file_path = "{}/{}.midi".format(output_directory, part_name)
  midi.save(new_file_path)

  part = Part(name=part_name, midi=midi, midi_filepath=new_file_path)

  return part

def convert_midi_to_mp3(midifile_path):
  output_base_filename = os.path.splitext(midifile_path)[0]
  # TODO: Hide output unless debug option on... probably need subprocess.run
  os.system("fluidsynth -r 44100 -R 1 -E little -T raw -F - -O s16 {} {} | lame --signed -s 44100 -r - {}.mp3".format(
    soundfont_path, midifile_path, output_base_filename
  ))

def change_instrument(midi_data, program_number):
  for track in midi_data.tracks:
    for message in track:
      if message.type == 'program_change':
        message.program = program_number

def generate_accompaniment(part, solo_parts):
  new_file = mido.MidiFile()

  for other_part in solo_parts:
      for track in other_part.midi.tracks:
          if other_part.name != part.name:
              print("should lower volumne")
          new_file.tracks.append(track)

  new_file_path = "{}/{}-accompaniment.midi".format(output_directory, part.name)
  new_file.save(new_file_path)

  return new_file_path

def generate_full_mp3(solo_parts):
  combiner = sox.Combiner()

  # docs https://pysox.readthedocs.io/en/latest/api.html
  input_files = [part.mp3_filepath() for part in solo_parts]
  output_file_path = "{}/alle.mp3".format(output_directory)
  combiner.build(input_files, output_file_path, 'mix-power')

def separate_tracks_into_mp3s(midi_data, description):
  solo_parts = []

  for part_name, track_numbers in description.items():
      solo_part = generate_solo_parts(midi_data, track_numbers, part_name)
      solo_parts.append(solo_part)

  # for part in solo_parts:
      # midis_to_convert.append(generate_accompaniment(part, solo_parts))

  generate_full_mp3(solo_parts)

def cleanup():
  remove_temporary_midifiles()

def remove_temporary_midifiles():
    for midi_file in os.listdir(output_directory):
        if midi_file.endswith('.midi'):
             os.unlink(os.path.join(output_directory, midi_file))

midifile_path = sys.argv[1]

# TODO: Document this and make optional
description = {
  "soprano": [0,1],
  "alt": [0,2],
  "tenor": [0,3],
  "bass": [0,4]
}

midi_data = mido.MidiFile(midifile_path)

separate_tracks_into_mp3s(midi_data, description)
cleanup()
