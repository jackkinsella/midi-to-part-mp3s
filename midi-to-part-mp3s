#!/usr/bin/env python3
import argparse
import os

import sox
import mido

output_directory = "./output"
soundfont_path = "./soundfonts/timbres-of-heaven.sf2"

class Part:
    def __init__(self, name='', midi='', midi_filepath=''):
        self.name = name
        self.midi = midi
        self.midi_filepath = midi_filepath
        self.mp3 = convert_midi_to_mp3(midi_filepath)

    def mp3_filepath(self):
        return self.midi_filepath.replace(".midi", ".mp3")

def track_names(midi_data):
  return list(map(lambda track: track.name, midi_dat.tracks))

def instrument_number_for_part(part):
    # based off http://www3.cpdl.org/wiki/index.php/User:Robert_Urmann
    mapping = {
            "soprano": 76, # pan flute
            "alt": 75, # recorder
            "tenor": 49, # string ensemble 1
            "bass": 50 # string ensemble 2
            }
    return mapping[part]

def generate_solo_parts(midi_data, track_numbers, part_name):
  midi = mido.MidiFile()

  for track_number in track_numbers:
    midi.tracks.append(midi_data.tracks[track_number])

  change_instrument(midi, instrument_number_for_part(part_name))
  new_file_path = "{}/{}.midi".format(output_directory, part_name)
  midi.save(new_file_path)

  part = Part(name=part_name, midi=midi, midi_filepath=new_file_path)

  return part

def convert_midi_to_mp3(midifile_path):
  output_base_filename = os.path.splitext(midifile_path)[0]
  # TODO: Hide output unless debug option on... probably need subprocess.run
  os.system("fluidsynth -r 44100 -R 1 -E little -T raw -F - -O s16 {} {} | lame --signed -s 44100 -r - {}.mp3".format(
    soundfont_path, midifile_path, output_base_filename
  ))

def change_instrument(midi_data, program_number):
  for track in midi_data.tracks:
    for message in track:
      if message.type == 'program_change':
        message.program = program_number

def generate_accompaniment(part, solo_parts):
  combiner = sox.Combiner()

  # docs https://pysox.readthedocs.io/en/latest/api.html
  input_files = [part.mp3_filepath() for part in solo_parts]
  input_volumes = [1 if channel == part.mp3_filepath() else 0.33 for channel in input_files]
  output_file_path = "{}/{} mit Begleitung.mp3".format(output_directory, part.name)
  combiner.build(input_files, output_file_path, 'mix-power', input_volumes)

def generate_full_mp3(solo_parts):
  combiner = sox.Combiner()

  # docs https://pysox.readthedocs.io/en/latest/api.html
  input_files = [part.mp3_filepath() for part in solo_parts]
  output_file_path = "{}/alle.mp3".format(output_directory)
  combiner.build(input_files, output_file_path, 'mix-power')

def separate_tracks_into_mp3s(args):
  midifile_path = args.midifile_path
  midi_data = mido.MidiFile(midifile_path)
  solo_parts = []

  for part_name, track_numbers in solo_track_bundles(args).items():
      solo_part = generate_solo_parts(midi_data, track_numbers, part_name)
      solo_parts.append(solo_part)

  for part in solo_parts:
      generate_accompaniment(part, solo_parts)

  generate_full_mp3(solo_parts)

def solo_track_bundles(args):
  out = {}
  for part_name in ['soprano', 'alt', 'bass', 'tenor']:
      out[part_name] = [vars(args)[part_name]] + args.common_solo_tracks
  return out

def cleanup():
  remove_temporary_midifiles()

def remove_temporary_midifiles():
    for midi_file in os.listdir(output_directory):
        if midi_file.endswith('.midi'):
             os.unlink(os.path.join(output_directory, midi_file))

parser = argparse.ArgumentParser()
parser.add_argument("-s", "--soprano", type=int, default=0)
parser.add_argument("-a", "--alt", type=int, default=1)
parser.add_argument("-t", "--tenor", type=int, default=2)
parser.add_argument("-b", "--bass", type=int, default=3)
parser.add_argument("-csts", "--common-solo-tracks", help='midi tracks that must appear \
        in all solo mp3s e.g. because they contain time signature changes',
        nargs='+', type=int, default=[])
parser.add_argument("-cats", "--common-accompaniment-tracks", help='midi tracks that \
        appear in all accompaniment mp3s e.g. piano or orchestra', nargs='+',
        type=int, default=[])
parser.add_argument("midifile_path")
args = parser.parse_args()

separate_tracks_into_mp3s(args)
cleanup()
